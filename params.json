{"name":"Eventdispatcher","tagline":"Easy to use event dispatcher for the java 1.8 environment","body":"### **Maven**\r\n```xml\r\n<dependency>\r\n    <groupId>de.schlegel11</groupId>\r\n    <artifactId>event-dispatcher</artifactId>\r\n    <version>1.1</version>\r\n</dependency>\r\n```\r\n### **Download** \r\n**Latest Version**\r\n<br>\r\n[**Release v1.1**](http://www.schlegel11.de/EventDispatcher/releases/tag/v1.1)\r\n<p>\r\n**Archived Versions (not recommended)**\r\n<br>\r\n[**Release v1.0**](http://www.schlegel11.de/EventDispatcher/releases/tag/v1.0)\r\n\r\n### **JavaDoc**\r\nFor more details see:\r\n[Javadoc]( http://eventdispatcher.schlegel11.de/apidocs)\r\n\r\n### **Usage**\r\n**EventListener interface that extends the standard [java.util.EventListener](http://docs.oracle.com/javase/7/docs/api/java/util/EventListener.html) interface:**\r\n\r\n```java\r\nimport java.util.EventListener;\r\nimport java.util.EventObject;\r\n\r\npublic interface MyListener extends EventListener {\r\n\tpublic void myEventMethod(EventObject eventObject);\r\n}\r\n```\r\n\r\n```java\r\nimport java.util.EventListener;\r\nimport java.util.EventObject;\r\n\r\npublic interface AnotherListener extends EventListener{\r\n\tpublic void anotherEventMethod(EventObject eventObject, int currentCalls);\r\n}\r\n```\r\n\r\n**Class that fires the event:**\r\n\r\n```java\r\nimport java.util.EventObject;\r\nimport de.schlegel11.eventdispatcher.EventDispatcher;\r\n\r\npublic class MySomethingHappensClass {\r\n\tprivate final EventDispatcher eventDispatcher = EventDispatcher.newInstance();\r\n\t\r\n\tpublic void addMyListenerListener(MyListener listener){\r\n\t\teventDispatcher.addListener(MyListener.class, listener);\r\n\t}\r\n\t\r\n\tpublic void addAnotherListener(AnotherListener listener){\r\n\t\teventDispatcher.addListener(AnotherListener.class, listener, 3);\r\n\t}\r\n\t\r\n\tpublic void removeMyListener(MyListener listener){\r\n\t\teventDispatcher.removeListener(MyListener.class, listener);\r\n\t}\r\n\t\r\n\tpublic void removeAnotherListener(AnotherListener listener){\r\n\t\teventDispatcher.removeListener(AnotherListener.class, listener);\r\n\t}\r\n\t\r\n\tpublic void removeAllMyListeners(){\r\n\t\teventDispatcher.removeListenerType(MyListener.class);\r\n\t}\r\n\t\r\n\tpublic void removeAllAnotherListeners(){\r\n\t\teventDispatcher.removeListenerType(AnotherListener.class);\r\n\t}\r\n\t\r\n\tpublic void removeAllListeners(){\r\n\t\teventDispatcher.clear();\r\n\t}\r\n\t\r\n\tpublic void somethingHappens(){\r\n\t\tEventObject eventObject = new EventObject(this);\r\n\t\t\r\n\t\tSystem.out.println(\"Fire MyListener\");\r\n\t\teventDispatcher.fireEvent(MyListener.class, l -> l.myEventMethod(eventObject));\r\n\t\t\r\n\t\teventDispatcher.fireEvent(AnotherListener.class, l -> {\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Fire AnotherListener\");\r\n\t\t\tint maxCalls = eventDispatcher.getListenerMaxCalls(AnotherListener.class, l);\t\r\n\t\t\tint currentCalls = eventDispatcher.getListenerCurrentCalls(AnotherListener.class, l);\r\n\t\t\t\r\n\t\t\tif(maxCalls == currentCalls){\r\n\t\t\t\tSystem.out.println(\"!!AnotherListener last call!!\");\r\n\t\t\t}\r\n\t\t\tl.anotherEventMethod(eventObject, currentCalls);\r\n\t\t\t});\r\n\t}\r\n}\r\n```\r\n\r\n**Main method:**\r\n\r\n```java\r\n\tpublic static void main(String[] args) {\r\n\t\tMySomethingHappensClass mshc = new MySomethingHappensClass();\r\n\r\n\t\tmshc.addMyListenerListener(new MyListener() {\r\n\t\t\tprivate int counter = 0;\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void myEventMethod(EventObject eventObject) {\r\n\t\t\t\tSystem.out.println((++counter)\r\n\t\t\t\t\t\t+ \" - MyEventMethod is called \\n\");\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tmshc.addAnotherListener(new AnotherListener() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void anotherEventMethod(EventObject eventObject,\r\n\t\t\t\t\tint currentCalls) {\r\n\t\t\t\tSystem.out.println(currentCalls\r\n\t\t\t\t\t\t+ \" - AnotherEventMethod is called \\n\");\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tfor (int i = 0; i < 5; i++) {\r\n\t\t\tmshc.somethingHappens();\r\n\t\t}\r\n\r\n\t\tSystem.out.println(\"Remove all listeners\");\r\n\t\tmshc.removeAllListeners();\r\n\t}\r\n```\r\n\r\n**Console output:**\r\n\r\n```\r\nFire MyListener\r\n1 - MyEventMethod is called \r\n\r\nFire AnotherListener\r\n1 - AnotherEventMethod is called \r\n\r\nFire MyListener\r\n2 - MyEventMethod is called \r\n\r\nFire AnotherListener\r\n2 - AnotherEventMethod is called \r\n\r\nFire MyListener\r\n3 - MyEventMethod is called \r\n\r\nFire AnotherListener\r\n!!AnotherListener last call!!\r\n3 - AnotherEventMethod is called \r\n\r\nFire MyListener\r\n4 - MyEventMethod is called \r\n\r\nFire MyListener\r\n5 - MyEventMethod is called \r\n\r\nRemove all listeners\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}